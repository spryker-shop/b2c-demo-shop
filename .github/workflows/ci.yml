name: B2C-CI

on:
    pull_request:
        types: [ labeled, unlabeled, synchronize, opened ]
    push:
        branches:
            - master
    workflow_dispatch:

env:
    SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    WEEKLY_CI_SLACK_CHANNEL_ID: ${{ secrets.WEEKLY_CI_SLACK_CHANNEL_ID }}
    JIRA_TICKET_SLACK_USER_GROUP_MAPPING: ${{ secrets.JIRA_TICKET_SLACK_USER_GROUP_MAPPING }}

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    validation:
        name: "Static analysis"
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                php-version: [
                    '8.2',
                    '8.3'
                ]

        env:
            APPLICATION_ENV: ci.mysql
            APPLICATION_STORE: DE
            PROJECT: suite
            SPRYKER_CURRENT_REGION: EU

        services:
            redis:
                image: redis
                ports:
                    - 6379/tcp
                options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

        steps:
            -   uses: actions/checkout@v4

            -   name: Configure sysctl limits
                run: |
                    sudo swapoff -a
                    sudo sysctl -w vm.swappiness=1
                    sudo sysctl -w fs.file-max=262144
                    sudo sysctl -w vm.max_map_count=262144

            -   name: Runs Elasticsearch
                uses: elastic/elastic-github-actions/elasticsearch@master
                with:
                    stack-version: 7.10.0
                    port: 9200

            -   uses: actions/setup-node@v4
                with:
                    node-version: '18'

            -   name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ matrix.php-version }}
                    extensions: mbstring, intl, pdo_mysql, redis
                    tools: composer:v2

            -   name: Composer get cache directory
                id: composer-cache
                run: |
                    echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

            -   name: Composer cache
                uses: actions/cache@v4
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-composer-

            -   name: Composer validate
                run: composer validate

            -   name: Composer version
                run: composer --version

            -   name: Composer install
                run: composer install

            -   name: Generate transfer objects
                run: vendor/bin/console transfer:generate

            -   name: Generate transfer databuilder objects
                run: vendor/bin/console transfer:databuilder:generate

            -   name: Propel install
                run: |
                    vendor/bin/console propel:schema:copy
                    vendor/bin/console propel:model:build
                    vendor/bin/console transfer:entity:generate

            -   name: Setup search
                run: vendor/bin/console setup:search

            -   name: Codecept build
                run: vendor/bin/codecept build --ansi

            -   name: Generate autocompletion files
                run: vendor/bin/console dev:ide-auto-completion:generate

            -   name: Generate rest API dcoumentation
                run: vendor/bin/console rest-api:generate:documentation

            -   name: Frontend install-dependencies
                run: |
                    vendor/bin/console frontend:project:install-dependencies -vvv

            -   name: Install NPM packages
                run: |
                    sudo npm i --location=global --unsafe-perm speccy@0.11.0

            -   name: Speccy lint Glue specification
                run: speccy lint src/Generated/Glue/Specification/spryker_rest_api.schema.yml --rules=default

            -   name: Validate propel files
                run: |
                    vendor/bin/console propel:schema:validate
                    vendor/bin/console propel:schema:validate-xml-names

            -   name: Validate transfer files
                run: vendor/bin/console transfer:validate

            -   name: Run CodeStyle checks
                run: vendor/bin/console code:sniff:style

            -   name: Run Architecture rules
                run: vendor/bin/phpmd src/ text vendor/spryker/architecture-sniffer/src/ruleset.xml --minimumpriority 2

            -   name: Run PHPStan
                run: vendor/bin/phpstan analyze -l 6 -c phpstan.neon src/

            -   name: Run Evaluator for release branches
                run: vendor/bin/evaluator evaluate --format=compact
                if: github.event.pull_request.base.ref == 'master' && startsWith(github.event.pull_request.head.ref, 'release-')

            -   name: Run Evaluator for all branches
                run: vendor/bin/evaluator evaluate --exclude-checkers=SPRYKER_DEV_PACKAGES_CHECKER --format=compact

            -   name: Slack Notification for failed job
                uses: ./.github/actions/job-slack-notifications
                if: always()

    docker-alpine-php-83-mariadb-cypress-dynamic-store-off:
        name: "Docker / Alpine / PHP 8.3 / MariaDB / Cypress / UI / Dynamic Store OFF"
        runs-on: ubuntu-latest
        env:
            PROGRESS_TYPE: plain
            SPRYKER_PLATFORM_IMAGE: spryker/php:8.3
            TRAVIS: 1
            ROBOT_TESTS_ARTIFACTS_BUCKET_REGION: eu-west-1
        steps:
            -   uses: actions/checkout@v4

            -   name: Install packages
                run: |
                    sudo apt-get update
                    sudo apt-get install -y python3-pip
                    pip3 install --upgrade pip
                    pip3 install awscli

            -   name: Install cypress-tests folder
                run: |
                    cd ./data && composer require "spryker/cypress-tests:dev-master" --dev --no-interaction
                    cp -r vendor ../vendor

            -   name: Install docker-compose
                run: |
                    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                    sudo chmod +x /usr/local/bin/docker-compose

            -   name: Install Project
                continue-on-error: true
                run: |
                    git clone https://github.com/spryker/docker-sdk.git ./docker
                    docker/sdk boot deploy.ci.acceptance.mariadb.dynamic-store-off.cypress.yml
                    sudo bash -c "echo '127.0.0.1 backend-api.eu.spryker.local backend-api.us.spryker.local backend-gateway.eu.spryker.local backend-gateway.us.spryker.local backoffice.eu.spryker.local backoffice.us.spryker.local glue-backend.eu.spryker.local glue-backend.us.spryker.local glue-storefront.eu.spryker.local glue-storefront.us.spryker.local glue.eu.spryker.local glue.us.spryker.local mail.spryker.local queue.spryker.local spryker.local swagger.spryker.local yves.eu.spryker.local yves.us.spryker.local' >> /etc/hosts"
                    docker/sdk up -t
                    docker/sdk cli composer dump-autoload -o -a --apcu
                    docker/sdk cli console queue:worker:start --stop-when-empty

            -   name: Run Tests
                run: |
                    docker/sdk exec cypress-tests cp .env.example .env
                    docker/sdk exec --env "ENV_REPOSITORY_ID=b2c" cypress-tests npm run cy:ci

            -   name: Upload artifacts
                if: failure()
                run: |
                    AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .cypress s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/b2c/dms-off/cypress/${GITHUB_RUN_ID}/PHP8.3MariaDB/ --recursive

            -   name: Slack Notification for failed job
                uses: ./.github/actions/job-slack-notifications
                if: always()

    docker-alpine-php-83-mariadb-cypress:
        name: "[run-ui-ci] PHP 8.3 / MariaDB / Cypress / UI"
        runs-on: ubuntu-latest
        env:
            PROGRESS_TYPE: plain
            SPRYKER_PLATFORM_IMAGE: spryker/php:8.3
            TRAVIS: 1
            ROBOT_TESTS_ARTIFACTS_BUCKET_REGION: eu-west-1
            SPRYKER_CURRENT_REGION: EU
            DYNAMIC_STORE_MODE: true
        steps:
            -   uses: actions/checkout@v4

            -   name: Install packages
                run: |
                    sudo apt-get update
                    sudo apt-get install -y python3-pip
                    pip3 install --upgrade pip
                    pip3 install awscli

            -   name: Install cypress-tests folder
                run: |
                    cd ./data && composer require "spryker/cypress-tests:dev-master" --dev --no-interaction
                    cp -r vendor ../vendor

            -   name: Install docker-compose
                run: |
                    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                    sudo chmod +x /usr/local/bin/docker-compose

            -   name: Install Project
                continue-on-error: true
                run: |
                    git clone https://github.com/spryker/docker-sdk.git ./docker
                    docker/sdk boot deploy.ci.acceptance.mariadb.cypress.yml
                    sudo bash -c "echo '127.0.0.1 backend-api.eu.spryker.local backend-api.us.spryker.local backend-gateway.eu.spryker.local backend-gateway.us.spryker.local backoffice.eu.spryker.local backoffice.us.spryker.local glue-backend.eu.spryker.local glue-backend.us.spryker.local glue-storefront.eu.spryker.local glue-storefront.us.spryker.local glue.eu.spryker.local glue.us.spryker.local mail.spryker.local queue.spryker.local spryker.local swagger.spryker.local yves.eu.spryker.local yves.us.spryker.local' >> /etc/hosts"
                    docker/sdk up -t
                    docker/sdk cli composer dump-autoload -o -a --apcu
                    docker/sdk cli console queue:worker:start --stop-when-empty

            -   name: Run Tests
                run: |
                    docker/sdk exec cypress-tests cp .env.dynamic-store.example .env
                    docker/sdk exec cypress-tests git log -2
                    docker/sdk exec --env "ENV_REPOSITORY_ID=b2c" cypress-tests npm run cy:ci

            -   name: Upload artifacts
                if: failure()
                run: |
                    AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .cypress s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/b2c/dms-on/cypress/${GITHUB_RUN_ID}/PHP8.3MariaDB/ --recursive

            -   name: Slack Notification for failed job
                uses: ./.github/actions/job-slack-notifications
                if: always()

