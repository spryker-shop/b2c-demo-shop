{% extends template('page-layout-cart', '@SprykerShop:CartPage') %}

{% define data = {
    breadcrumbs: _view.stepBreadcrumbs.breadcrumbs | default([])
} %}

{% block breadcrumbs %}{% endblock %}

{% block contentClass %}page-layout-cart{% endblock %}

{% block title %}
    {% widget 'CartOperationsWidget' args [data.cart] use view('cart-operations-title', 'MultiCartWidget') only %}{% endwidget %}
{% endblock %}

{% block contentInner %}
    {% if data.cart.idQuote is not empty %}
        <div>
            {% widget 'CreateShoppingListFromCartWidget' args [data.cart.idQuote] with {
                data: {
                    ajaxTriggerAttribute: ajaxTriggerAttribute,
                },
            } only %}
            {% endwidget %}
        </div>
    {% endif %}

    {% if data.cart.items is empty %}
        <div class="page-layout-cart__empty text-center">
            <h1>{{ data.title }}</h1>
            <h6 class="spacing-top spacing-top--bigger">{{ 'cart.empty' | trans }}</h6>
        </div>
    {% else %}
        <div class="grid spacing-x spacing-x--big">
            <div class="col col--sm-12 col--lg-8">
                <div class="page-layout-cart__col page-layout-cart__col--content">
                    <div class="cart-box grid grid--middle grid--justify">
                        <h3 class="col">{{ 'cart.title_content' | trans }}</h3>
                        <span class="cart-box__quantity col">{{ getCartQuantity() | executeFilterIfExists('formatInt', app.locale) }} {{ 'item' | trans }}</span>
                    </div>
                    <div class="page-layout-cart__items-wrap">
                        {% widget 'QuoteConfiguredBundleWidget'
                            args [data.cart]
                            use view('quote-configured-bundle-alternative', 'ConfigurableBundleWidget')
                            with {
                                data: {
                                    isEditable: data.isQuoteEditable,
                                    ajaxTriggerAttribute: ajaxTriggerAttribute,
                                },
                        } only %}{% endwidget %}

                        {% set productBundleItemCounterWidget = findWidget('ProductBundleItemCounterWidget', [data.cart]) %}
                        {% set transformedCartItems = productBundleItemCounterWidget.items | default(data.cartItems) %}

                        {% for cartItem in transformedCartItems %}
                            {% if not cartItem.configuredBundleItem %}
                                {% include molecule('product-card-item') with {
                                    data: {
                                        product: data.cart,
                                        productItem: cartItem,
                                        attributes: data.attributes[cartItem.sku] | default([]),
                                        ajaxTriggerAttribute: ajaxTriggerAttribute,
                                    },
                                } only %}
                            {% endif %}
                        {% endfor %}
                    </div>
                    {% widget 'CartDiscountPromotionProductListWidget' args [data.cart, data.request] with {
                        data: {
                            ajaxTriggerAttribute: ajaxTriggerAttribute,
                        },
                    } only %}
                    {% endwidget %}
                </div>
            </div>

            <div class="col col--sm-12 col--lg-4">
                <div class="page-layout-cart__col page-layout-cart__col--sidebar">
                    <h3 class="cart-box">{{ 'cart.title_sidebar' | trans }}</h3>

                    <div class="cart-box cart-box--voucher cart-box--reset-spacing">
                        {% if not is_granted('IS_AUTHENTICATED_FULLY') or can('WriteSharedCartPermissionPlugin', data.cart.idQuote) %}
                             {% widget 'CartCodeFormWidget' args [data.cart] with {
                                data: {
                                    ajaxTriggerAttribute: ajaxTriggerAttribute,
                                    redirectRoute: data.isCartActionsAsyncModeEnabled ? 'cart/async/view' : null,
                                },
                            } only %}
                                {% block body %}
                                    {{ parent() }}
                                    <hr>
                                {% endblock %}
                            {% elsewidget 'DiscountVoucherFormWidget' only %}
                                {% block body %}
                                    {{ parent() }}
                                    <hr>
                                {% endblock %}
                            {% endwidget %}
                        {% endif %}
                    </div>
                    {% include molecule('cart-summary', 'CartPage') with {
                        data: {
                            cart: data.cart,
                            isQuoteValid: data.isQuoteValid,
                            isQuoteEditable: data.isQuoteEditable,
                            ajaxTriggerAttribute: ajaxTriggerAttribute,
                        },
                    } only %}
                </div>
            </div>
        </div>
    {% endif %}

    {% widget 'UpSellingProductsWidget' args [data.cart] only %}{% endwidget %}

    {% if data.isCartActionsAsyncModeEnabled %}
        {{ block('ajaxLoader') }}
    {% endif %}
{% endblock %}

{% block footer %}
    {{ block('footer', template('page-layout-main')) }}
{% endblock %}
