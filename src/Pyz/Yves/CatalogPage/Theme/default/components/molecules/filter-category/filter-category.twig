{% extends molecule('filter-category', '@SprykerShop:CatalogPage') %}

{% define data = {
    levelMenu: 1,
} %}

{% block body %}
    {% set categoryPath = app.request.attributes.get('categoryNode') is not null
        ? app.request.attributes.get('categoryNode').url
        : app.request.attributes.get('categoryPath')
    %}

    <ul class="menu">
        {% for categoryNode in data.categories %}
            {% set quantity = 0 %}
            {% set hasChildren = (categoryNode.children | default([]) is not empty) %}

            {% for filterValue in data.filter.values %}
                {% if filterValue.value == categoryNode.nodeId %}
                    {% set quantity = filterValue.docCount %}
                {% endif %}
            {% endfor %}

            {% set currentUrl = data.filterPath is not empty ? url(data.filterPath, {categoryPath: (categoryPath)}) : categoryPath %}
            {% set categoryUrl = data.filterPath is not empty ? url(data.filterPath, {categoryPath: (categoryNode.url | trimLocale)}) : categoryNode.url %}
            {% set isActive = currentUrl == categoryUrl %}
            {% set disableAttribute = quantity == 0 ? 'disabled' %}
            {% set classes = [
                config.name ~ '__item',
                config.name ~ '__item--level-' ~ data.levelMenu,
                isActive ? config.name ~ '__item--active' : '',
                hasChildren ? config.name ~ '__item--children' : '',
            ] %}
            {% set linkActiveClass = isActive ? config.name ~ '__link--active' %}
            {% set triggerButtonJsName = data.parentJsName ? data.parentJsName ~ '__trigger' %}

            {% set categoryNamePrepared = categoryNode.name | replace({'[^a-zA-Z0-9]': '_'}) %}
            {% set childrenClass = categoryNode.hasChildren ? 'menu__item--has-children-list' %}
            {% set triggerClassName = config.jsName ~ '__category-trigger-' ~ categoryNamePrepared %}
            {% set targetCategoryClassName = config.jsName ~ '__category-target-' ~ categoryNamePrepared %}
            {% set targetTogglerClassName = config.jsName ~ '__toggler-target-' ~ categoryNamePrepared %}
            {% set classToToggle = config.name ~ '__category-target' %}
            {% set categoryTargetInner = config.name ~ '__category-target-inner' %}
            {% set classToToggleModifier = classToToggle ~ '--hidden' %}
            {% set toggleButtonClassName = config.name  ~ '__category-toggle-button' %}

            <li class="{{ classes | join(' ') }}">
                {% if hasChildren %}
                    {% block categoryItemToggler %}
                        <div>
                            {% block categoryItemTogglerIcon %}
                                <button type="button" class="spacing-right--small {{ toggleButtonClassName }} {{ triggerClassName }} {{ targetTogglerClassName }}">
                                    {% include atom('icon') with {
                                        class: config.name ~ '__category-toggle-button-icon',
                                        modifiers: ['small'],
                                        data: {
                                            name: 'arrow-down',
                                        },
                                    } only %}
                                </button>
                            {% endblock %}

                            {% block categoryItemTogglerHandlers %}
                                {% include molecule('toggler-click') with {
                                    attributes: {
                                        'trigger-class-name': triggerClassName,
                                        'target-class-name': targetCategoryClassName,
                                        'class-to-toggle': classToToggleModifier,
                                    },
                                } only %}

                                {% include molecule('toggler-click') with {
                                    attributes: {
                                        'trigger-class-name': triggerClassName,
                                        'target-class-name': targetTogglerClassName,
                                        'class-to-toggle': toggleButtonClassName ~ '--collapsed',
                                    },
                                } only %}
                            {% endblock %}
                        </div>
                    {% endblock %}
                {% endif %}

                <div class="{{ config.name }}__category-row {{ not hasChildren ? config.name ~ '__category-row--no-children' }}">
                    <button class="{{ config.name }}__link {{ linkActiveClass }} {{ triggerButtonJsName }}" {{ disableAttribute }} type="button" data-url={{ categoryUrl }} data-name="{{ categoryNode.name }}">
                        {{ categoryNode.name }}
                        <span class="text-secondary">({{ quantity | executeFilterIfExists('formatInt', app.locale) }})</span>
                    </button>

                    {% if hasChildren %}
                        <div class="{{ classToToggle }} {{ targetCategoryClassName }}">
                            <div class="{{ categoryTargetInner }}">
                                {% include molecule('filter-category', 'CatalogPage') with {
                                    data: {
                                        levelMenu: data.levelMenu + 1,
                                        filter: data.filter,
                                        filterPath: data.filterPath,
                                        categories: categoryNode.children,
                                        parentJsName: data.parentJsName,
                                    },
                                } only %}
                            </div>
                        </div>
                    {% endif %}
                </div>
            </li>
        {% endfor %}
    </ul>
{% endblock %}
