{% extends view('pdp', '@SprykerShop:ProductDetailPage') %}

{% block headStyles %}
    {{ parent() }}
    <link itemprop="url" href="{{ data.productUrl }}">
{% endblock %}

{% block pageInfo %}
    <div class="container__inner">
        {% block breadcrumbs %}
            {% widget 'ProductBreadcrumbsWithCategoriesWidget' args [data.product, data.requestReferer] only %}{% endwidget %}
        {% endblock %}
    </div>
{% endblock %}

{% block contentClass %} page-layout-main {% endblock %}

{% block content %}
    <div class="container__inner">
        <div class="grid">
            <meta itemprop="name" content="{{ data.product.name }}">
            <meta itemprop="url" content="{{ data.hostName }}{{ data.productUrl }}">
            <meta itemprop="sku" content="{{ data.product.sku }}">
            <meta itemprop="abstractSku" content="{{ data.product.abstractSku }}">
            <meta itemprop="productId" content="{{ data.product.sku }}">
            <meta itemprop="description" content="{{ data.product.metaDescription }}">

            {% if data.product.images.0.externalUrlLarge is defined %}
                <meta itemprop="image" content="{{ data.product.images.0.externalUrlLarge }}">
            {% endif %}

            {% if data.product.attributes.brand is defined %}
                <div itemprop="brand" itemscope itemtype="https://schema.org/Brand">
                    <meta itemprop="name" content="{{ data.product.attributes.brand }}">
                </div>
            {% endif %}

            {% widget 'ProductSchemaOrgCategoryWidget' args [data.product] only %}{% endwidget %}

            {% if data.product.attributes.upcs is defined %}
                <meta itemprop="gtin12" content="{{ data.product.attributes.upcs }}">
            {% endif %}

            <meta itemprop="inProductGroupWithID" content="{{ data.product.idProductAbstract }}">

            {% include molecule('product-carousel', 'ProductDetailPage') with {
                class: 'col page-layout-main__content-pdp',
                data: {
                    product: data.product,
                },
            } only %}

            <div class="col page-layout-main__sidebar-pdp">
                {% include molecule('product-configurator', 'ProductDetailPage') with {
                    data: {
                        product: data.product,
                    },
                } only %}
            </div>
        </div>
    </div>

    {% widget 'ProductAlternativeListWidget' args [data.product] only %}{% endwidget %}

    <div class="container__inner">
        {% include molecule('product-detail', 'ProductDetailPage') with {
            data: {
                description: data.product.description,
                attributes: data.product.attributes,
                sku: data.product.sku,
            },
        } only %}
    </div>

    {% widget 'ProductReplacementForListWidget' args [data.product.sku] only %}{% endwidget %}

    <div class="container__inner">
        {% widget 'ProductDetailPageReviewWidget' args [data.product.idProductAbstract] only %}{% endwidget %}

        {% if data.product.productSetIds is not empty %}
            {% widget 'ProductSetIdsWidget' args [data.product.productSetIds] only %}{% endwidget %}
        {% endif %}
    </div>

    {% widget 'SimilarProductsWidget' args [data.product] only %}{% endwidget %}

    <div class="container__inner">
        {% embed molecule('product-cms-block', 'CmsBlockWidget') ignore missing with {
            data: {
                idProductAbstract: data.product.idProductAbstract,
            }
        } only %}
            {% block body %}
                {% cms_slot 'slt-7' required ['idProductAbstract'] with {
                    idProductAbstract: data.idProductAbstract,
                } %}
            {% endblock %}
        {% endembed %}
    </div>
{% endblock %}

{% block eventTracker %}
    {% set sku = data.product.idProductConcrete ? data.product.sku : (data.product.attributeMap is defined and data.product.attributeMap ? data.product.attributeMap.productConcreteIds | keys | first) | default(data.product.sku) %}

    {% set events = {
        list: events.list | merge([
            {
                event: 'ADD_TO_WISHLIST',
                name: 'click',
                triggers: [
                    {
                        selector: '.wishlist-selector__form button',
                    },
                ],
            },
            {
                event: 'ADD_TO_CART',
                name: 'click',
                triggers: [
                    {
                        selector: 'body:has(.product-configurator__button-wrap button:focus)',
                        groupAs: {
                            key: 'products',
                            toArray: true,
                        },
                        data: {
                            quantity: [
                                {
                                    selector: '.product-configurator select[name="quantity"]',
                                    attribute: 'value',
                                },
                                {
                                    selector: '.product-configurator .js-formatted-number-input__hidden-input',
                                    attribute: 'value',
                                }
                            ],
                            price: {
                                selector: '.product-configurator [itemprop="price"]',
                                attribute: 'content',
                            },
                            sku: {
                                value: sku,
                            },
                        },
                    },
                ],
            }
        ]),
        data: events.data | merge({
            page: 'PDP',
            products: [{ sku: sku }],
            searchId: app.request.get('search-id'),
        }),
    } %}

    {{ parent() }}
{% endblock %}
