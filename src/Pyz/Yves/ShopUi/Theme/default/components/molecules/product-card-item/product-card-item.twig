{% extends model('component') %}
{% import _self as component %}

{% define config = {
    name: 'product-card-item',
    tag: 'article',
} %}

{% define data = {
    product: {},
    productItem: required,
    attributes: [],
    options: [],
    idQuote: data.product.idQuote | default(null),
    isPromotionItem: false,
    canEditCart: true,
    additionalContainerClass: 'grid--justify grid--no-wrap',
    productOptionsModifiers: [],
    ajaxTriggerAttribute: null,
} %}

{% set canEditCart = (not is_granted('IS_AUTHENTICATED_FULLY') or can('WriteSharedCartPermissionPlugin', data.idQuote)) and data.canEditCart %}
{% set productItemBox = (data.productItem.productOptions is defined and data.productItem.productOptions is empty) ? '' : config.name ~ '__box--with-options' %}

{% block body %}
    <div class="{{ component.renderClass(config.name ~ '__box', modifiers) }} {{ productItemBox }}">
        <div class="grid {{ data.additionalContainerClass }}">
            {% block image %}
                <a href="{{ data.productItem.url }}" class="{{ component.renderClass(config.name ~ '__image', modifiers) }} col">
                    {% include molecule('product-image') with {
                        data: {
                            name: data.productItem.name | default,
                            image: data.productItem.images[0].externalUrlLarge | default(null),
                        },
                    } only %}

                    {% block labels %}{% endblock %}
                    {% block groups %}{% endblock %}
                </a>
            {% endblock %}

            <div class="{{ component.renderClass(config.name ~ '__content-wrapper', modifiers) }} col">
                <div class="{{ component.renderClass(config.name ~ '__content', modifiers) }}">
                    <div class="grid grid--justify grid--middle">
                        {% block title %}
                            <a href="{{ data.productItem.url }}" class="{{ component.renderClass(config.name ~ '__title', modifiers) }} col col--lg-8 col--sm-12">
                                {{ data.productItem.name }}
                            </a>
                        {% endblock %}

                        {% block price %}
                            {% set price = data.productItem.unitPrice is defined ? data.productItem.unitPrice : data.productItem.price %}
                            {% set productItemSubTotal = data.productItem.quantity is not empty ? data.productItem.quantity * price : price %}

                            {% if can('SeePricePermissionPlugin') %}
                                {% include molecule('money-price') with {
                                    modifiers: ['small'],
                                    class: component.renderClass(config.name ~ '__price', modifiers) ~ ' col col--lg-4 col--sm-12',
                                    data: {
                                        amount: productItemSubTotal | default(null),
                                        originalAmount: data.productItem.prices.ORIGINAL is not defined or data.productItem.prices.ORIGINAL is empty ? null : data.productItem.prices.ORIGINAL
                                    },
                                } only %}
                            {% else %}
                                {{ 'customer.access.cannot_see_price' | trans }}
                            {% endif %}
                        {% endblock %}
                    </div>

                    {% if not data.isPromotionItem %}
                        <div class="{{ component.renderClass(config.name ~ '__options', modifiers) }}">
                            {% block options %}
                                {% if data.attributes is not empty %}
                                    {% include molecule('product-item-variant-selector') with {
                                        data: {
                                            productItem: data.productItem,
                                            productItemAttributes: data.attributes,
                                            ajaxTriggerAttribute: data.ajaxTriggerAttribute,
                                        }
                                    } only %}
                                {% endif %}
                            {% endblock %}

                            {% block productConfiguration %}
                                {% set hasStatus = true %}

                                {% block productConfigurationContent %}
                                    {% widget 'ProductConfigurationCartItemDisplayWidget'
                                        args [data.productItem]
                                        with {
                                        data: {
                                            wrapperClassName: config.name ~ '__product-configuration',
                                            hasStatus: hasStatus,
                                            modifiers: ['alternative'],
                                        },
                                    } only %}
                                    {% endwidget %}
                                {% endblock %}

                                {% block productConfigurationButton %}
                                    {% widget 'ProductConfigurationCartPageButtonWidget' args [data.productItem] only %}
                                    {% endwidget %}
                                {% endblock %}
                            {% endblock %}

                            <div class="grid grid--justify grid--gap">
                                <div class="col">
                                    {% block quantity %}
                                        {% if canEditCart %}
                                            {% widget 'CartChangeQuantityFormWidget' args [data.productItem, not canEditCart] with {
                                                data: {
                                                    ajaxTriggerAttribute: data.ajaxTriggerAttribute,
                                                },
                                            } only %}
                                            {% endwidget %}
                                        {% else %}
                                            {{ 'cart.item_quantity' | trans }}: {{ data.productItem.quantity | executeFilterIfExists('formatInt', app.locale) }}
                                        {% endif %}
                                    {% endblock %}
                                </div>

                                {% block state %}{% endblock %}
                            </div>

                            {% if canEditCart %}
                               {% widget 'RemoveFromCartFormWidget' args [data.productItem, random()] with {
                                    data: {
                                        ajaxTriggerAttribute: data.ajaxTriggerAttribute,
                                    },
                                    embed: {
                                        ajaxTriggerAttribute: data.ajaxTriggerAttribute,
                                    },
                                }  only %}
                                    {% block embeddedData %}
                                        <button {{ embed.ajaxTriggerAttribute }} class="link link--darkest link--edit" data-init-single-click {{ qa('add-to-cart-button') }}>
                                            {{- 'remove' | trans -}}
                                        </button>
                                    {% endblock %}
                                {% endwidget %}
                            {% endif %}
                        </div>
                    {% endif %}

                    {% block content %}{% endblock %}
                    {% block actions %}{% endblock %}
                </div>

                {% block additionalInfo %}{% endblock %}
            </div>
        </div>

        {% block bundles %}
            {% widget 'ProductBundleCartItemsListWidget' args [data.productItem, data.product] only %}{% endwidget %}
        {% endblock %}

        {% block summary %}
            {% if data.productItem.productOptions is defined and data.productItem.productOptions is not empty %}
                <div class="grid grid--right">
                    {% include molecule('product-item-summary') with {
                        class: 'col',
                        modifiers: data.productOptionsModifiers,
                        data: {
                            productItem: data.productItem,
                        },
                    } only %}
                </div>
            {% endif %}
        {% endblock %}
    </div>
{% endblock %}
